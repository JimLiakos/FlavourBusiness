<UserControl x:Class="FLBManager.Views.Preparation.ItemsPreparationInfoTreeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:resx="clr-namespace:FLBManager.Properties"
             xmlns:local="clr-namespace:FLBManager.ViewModel.Preparation" 
             xmlns:MenuItemsEditorViews="clr-namespace:MenuItemsEditor.Views;assembly=MenuItemsEditor"
             xmlns:ControlsEx="clr-namespace:System.Windows.Controls;assembly=WPFConnectableControls"
             mc:Ignorable="d" 

             d:DesignHeight="100" d:DesignWidth="800">
    <UserControl.Resources>
        <DataTemplate x:Key="NormalTemplate">
            <ContentControl Background="Transparent" >
                <StackPanel   AllowDrop="True" Orientation="Horizontal" Margin="4,2,4,2" d:DataContext="{d:DesignInstance local:ItemsPreparationInfoPresentation}" >
                    <CheckBox Visibility="{Binding CheckBoxVisibility}" IsEnabled="{Binding IncludeAllItemsAllowed}" VerticalAlignment="Center" IsChecked="{Binding CanPrepared}"></CheckBox>
                    <Image Width="16" Height="16" Source="{Binding TreeImage}" Margin="0,0,5,0"></Image>
                    <ControlsEx:EditableTextBlock Background="Transparent" IsEditable="{Binding IsEditable}"  IsInEditMode="{Binding Edit,Mode=TwoWay}" Text="{Binding Name,Mode=TwoWay,UpdateSourceTrigger=LostFocus}" />
                    <StackPanel Orientation="Horizontal">
                        <ControlsEx:EditableTextBlock Width="30" Visibility="{Binding Path=PreparationTimeIsVisible, Converter={StaticResource BooleanToVisibilityConverter}}"  Margin="5,0,0,0"  TextAlignment="Right"    HorizontalAlignment="Stretch"  TextBoxInputType="Decimal"  IsInEditMode="{Binding  Path=Edit,Mode=OneWay}" Text="{Binding Path=TotalPreparationTimeSpanInMin,Mode=TwoWay, UpdateSourceTrigger=LostFocus}" >
                            <ControlsEx:EditableTextBlock.Style>
                                <Style TargetType="ControlsEx:EditableTextBlock" BasedOn="{StaticResource {x:Type ControlsEx:EditableTextBlock}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HasPreparationTimeSpanValue}" Value="True">
                                            <Setter Property="FontWeight"  Value="Medium" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ControlsEx:EditableTextBlock.Style>
                        </ControlsEx:EditableTextBlock>
                        <TextBlock Grid.Column="1"  Visibility="{Binding Path=PreparationTimeIsVisible, Converter={StaticResource BooleanToVisibilityConverter}}" HorizontalAlignment="Left" VerticalAlignment="Center" Text="min">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HasPreparationTimeSpanValue}" Value="True">
                                            <Setter Property="FontWeight"  Value="Medium" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <StackPanel.ToolTip>
                            <ToolTip>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="{x:Static resx:Resources.PreparationTimeSpanLabel}" Margin="0,0,5,0"/>
                                    <TextBlock Text="{Binding Path=PreparationTimeSpanInMin}"/>
                                    <TextBlock  Text="min"></TextBlock>
                                    <StackPanel Orientation="Horizontal" Margin="5,0,0,0" Visibility="{Binding Path=IsCooked, Converter={StaticResource BooleanToVisibilityConverter}}" >
                                        <TextBlock Text="{x:Static resx:Resources.CookingTimeSpanLabel}" Margin="0,0,5,0"/>
                                        <TextBlock Text="{Binding CookingTimeSpanInMin}"/>
                                        <TextBlock  Text="min"></TextBlock>
                                    </StackPanel>
                                </StackPanel>

                            </ToolTip>
                        </StackPanel.ToolTip>
                    </StackPanel>
                    <Image Margin="5,0,0,0" Width="16" Height="16"  Source="/FLBManager;component/Resources/Images/Metro/bbq16.png" Visibility="{Binding Path=IsCooked, Converter={StaticResource BooleanToVisibilityConverter}}"></Image>

                    <StackPanel Orientation="Horizontal" Visibility="{Binding Path=HasAppearanceOrderValue, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Label VerticalAlignment="Center"   Content="{Binding AppearanceOrderText}" Margin="7,0,0,0"></Label>
                        <Image Width="20" Height="20" Source="/FLBManager;component/Resources/Images/Metro/sort24.png" >
                            <Image.ToolTip>
                                <TextBlock Text="Appearance Order"></TextBlock>
                            </Image.ToolTip>
                        </Image>
                    </StackPanel>

                    <Image  Visibility="{Binding Path=HasTags, Converter={StaticResource BooleanToVisibilityConverter}}" Margin="5,0,0,0"  Width="16" Height="16" Source="/FLBManager;component/Resources/Images/Metro/tags.png">
                        <Image.ToolTip>
                            <ItemsControl ItemsSource="{Binding Tags}" >
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Name}" Margin="0,0,5,0" />
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </Image.ToolTip>
                    </Image>


                </StackPanel>
            </ContentControl>
        </DataTemplate>
        <DataTemplate x:Key="EditTemplate">

            <StackPanel Loaded="ItemsPreparationInfoTreeView_Loaded" Unloaded="ItemsPreparationInfoTreeView_Unloaded" AllowDrop="True" Orientation="Horizontal" Margin="4,2,4,2" d:DataContext="{d:DesignInstance local:ItemsPreparationInfoPresentation}" >


                <CheckBox Visibility="{Binding CheckBoxVisibility}" IsEnabled="False"  VerticalAlignment="Center" IsChecked="{Binding CanPrepared}"></CheckBox>
                <Image Width="16" Height="16" Source="{Binding TreeImage}" Margin="0,0,5,0"></Image>
                <Border BorderBrush="{StaticResource BorderBrush}" BorderThickness="2" Background="{StaticResource WindowBackgroundBrush}">
                    <StackPanel  Orientation="Horizontal" Margin="5,5,5,5">
                        <Label VerticalAlignment="Center"  Content="{Binding Name}" />
                        <ControlsEx:TextBoxNumberWithUnit FontWeight="{Binding PreparationTimeFontWeight}" Width="60"   Margin="5,0,0,0"  Name="PreparationTime" TextAlignment="Right" VerticalContentAlignment="Center"  HorizontalAlignment="Stretch"    Number="{Binding Path=PreparationTimeSpanInMin,Mode=TwoWay, UpdateSourceTrigger=LostFocus}"  Unit="min">
                            <ControlsEx:TextBoxNumberWithUnit.Style>
                                <Style  TargetType="{x:Type ControlsEx:TextBoxNumberWithUnit}" BasedOn="{StaticResource TextBoxStyle}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HasPreparationTimeSpanValue}" Value="True">
                                            <Setter Property="FontWeight"  Value="Medium" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ControlsEx:TextBoxNumberWithUnit.Style>
                        </ControlsEx:TextBoxNumberWithUnit>
                        <!--<TextBlock Grid.Column="1" Margin="3,0,0,0"  Visibility="{Binding Path=PreparationTimeIsVisible, Converter={StaticResource BooleanToVisibilityConverter}}" HorizontalAlignment="Left" VerticalAlignment="Center" Text="min"></TextBlock>-->
                        <CheckBox Margin="5,0,0,0" Background="AliceBlue" VerticalAlignment="Center" Content="is cooked" IsChecked="{Binding IsCooked}" TabIndex="1"></CheckBox>
                        <ControlsEx:TextBoxNumberWithUnit Width="60"  Name="CookingTime"  FontWeight="{Binding CookingTimeFontWeight}" Visibility="{Binding Path=IsCooked, Converter={StaticResource BooleanToVisibilityConverter}}"   Margin="5,0,0,0"  TextAlignment="Right" VerticalContentAlignment="Center"  HorizontalAlignment="Stretch"    Number="{Binding Path=CookingTimeSpanInMin,Mode=TwoWay, UpdateSourceTrigger=LostFocus}"  Unit="min"/>

                        <StackPanel Orientation="Horizontal" Cursor="Hand">

                            <Label VerticalAlignment="Center" Visibility="{Binding Path=HasAppearanceOrderValue, Converter={StaticResource BooleanToVisibilityConverter}}"  Content="{Binding AppearanceOrderText}" Margin="7,0,-4,0"></Label>
                            <Button x:Name="AppearanceOrder" Margin="0,0,0,0"  Style="{DynamicResource ImageButton}"  Command="{Binding ToggleAppearanceOrderCommand}" >
                                <Image Width="20" Height="20" Source="/FLBManager;component/Resources/Images/Metro/sort24.png" ></Image>
                            </Button>

                        </StackPanel>

                        <Button x:Name="TagsToggle" Margin="5,0,0,0"   Width="30" Height="30"  Command="{Binding ToggleTagsCommand}" >
                            <Image Width="16" Height="16" Source="/FLBManager;component/Resources/Images/Metro/tags.png" ></Image>
                        </Button>

                        <Popup x:Name="TagsPopup" IsOpen="{Binding TagsPopupOpen}" HorizontalOffset="-200" Placement="Bottom"   AllowsTransparency="True"  PopupAnimation="Fade"  StaysOpen="False" PlacementTarget="{Binding ElementName=TagsToggle}"  >
                            <Grid x:Name="TagsArea" MinWidth="400" Background="{StaticResource WindowBackgroundBrush}">
                                <Border  BorderThickness="1" BorderBrush="{StaticResource ListBoxBorderBrush}">
                                    <Grid Margin="5,0,5,0"  Grid.Row="4" MinHeight="45">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="auto" />
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Label VerticalAlignment="Center"  Content="Tags:" Margin="4,0,0,4"></Label>
                                        <Border Margin="8" Grid.Column="1" BorderThickness="1" BorderBrush="{StaticResource ListBoxBorderBrush}">

                                            <ItemsControl ItemsSource="{Binding Tags}" >
                                                <ItemsControl.ItemsPanel>
                                                    <ItemsPanelTemplate>
                                                        <StackPanel Orientation="Horizontal"/>
                                                    </ItemsPanelTemplate>
                                                </ItemsControl.ItemsPanel>
                                                <ItemsControl.ItemTemplate>
                                                    <DataTemplate>
                                                        <MenuItemsEditorViews:TagView></MenuItemsEditorViews:TagView>
                                                    </DataTemplate>

                                                </ItemsControl.ItemTemplate>
                                            </ItemsControl>



                                        </Border>
                                        <Button VerticalAlignment="Center" Grid.Column="2" Margin="10,1,1,1" Style="{StaticResource ListViewBarButtonStyle}" Width="26" Height="26" Command="{Binding Path= NewTagCommand}">
                                            <Image Width="16" Height="16" Source="pack://application:,,,/MenuItemsEditor;Component/Image/add16.png"></Image>
                                        </Button>
                                    </Grid>
                                </Border>


                            </Grid>

                        </Popup>

                        <Popup x:Name="AppearanceOrderPopup" IsOpen="{Binding AppearanceOrderPopupOpen}" HorizontalOffset="-150" Placement="Bottom"   AllowsTransparency="True"  PopupAnimation="Fade"  StaysOpen="False" PlacementTarget="{Binding ElementName=AppearanceOrder}"  >
                            <Grid x:Name="AppearanceOrderArea" MinWidth="300"  Background="{StaticResource WindowBackgroundBrush}">
                                <Border  BorderThickness="1" BorderBrush="{StaticResource ListBoxBorderBrush}">
                                    <Grid Margin="15"   Grid.Row="4" MinHeight="45">
                                        <!--<Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="auto" />
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="auto"/>
                                        </Grid.ColumnDefinitions>-->
                                        <Grid.RowDefinitions>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" >
                                            <Label VerticalAlignment="Center"  Content="Appearance Order:" Margin="4,0,0,0"></Label>
                                            <TextBlock VerticalAlignment="Center" Grid.Column="1"  Text="{Binding AppearanceOrderText}" Margin="4,0,0,0"></TextBlock>
                                        </StackPanel>
                                        <Slider Grid.Column="1" Grid.Row="1" Maximum="10" Minimum="1" TickFrequency="1"  VerticalAlignment="Center"  Value="{Binding AppearanceOrder}" Margin="5,0,0,0"></Slider>
                                    </Grid>
                                </Border>


                            </Grid>

                        </Popup>



                    </StackPanel>
                </Border>

            </StackPanel>


        </DataTemplate>
        <Style x:Key="ImageButton" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="Transparent"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border  BorderThickness="0" BorderBrush="{StaticResource ButtonBorderBrush}"
                            Background="Transparent">
                            <ContentPresenter Margin="4" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FFE6E6E6" />
                                <Setter Property="Foreground" Value="#FF333333" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#FFE6E6E6" />
                                <Setter Property="Foreground" Value="#FF333333" />
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </UserControl.Resources>
    <Grid MouseLeftButtonDown="MouseLeftButtonDown" x:Name="Grid" >
        <ContentPresenter Content="{Binding}" >
            <ContentPresenter.Style>
                <Style TargetType="{x:Type ContentPresenter}">
                    <Setter Property="ContentTemplate" Value="{StaticResource NormalTemplate}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Edit}" Value="True">
                            <Setter Property="ContentTemplate" Value="{StaticResource EditTemplate}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ContentPresenter.Style>
        </ContentPresenter>

    </Grid>
</UserControl>
