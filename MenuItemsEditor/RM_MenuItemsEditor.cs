//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MenuItemsEditor.ViewModel.Proxies
{
    using System;
    
    
    public sealed class CNSPr_IMenuItemTSViewModel_CultureChange : OOAdvantech.Remoting.EventConsumerHandler
    {
        
        public void Invoke(string newLanguage)
        {
            object[] args = new object[1];
            System.Type[] argsTypes = new System.Type[1];
            args[0] = newLanguage;
            argsTypes[0] = typeof(string);
            object retValue = this.Invoke(typeof(MenuItemsEditor.ViewModel.CultureChangeHandle), "Invoke", args, argsTypes);
        }
        
        public override void AddEventHandler(object target, System.Reflection.EventInfo eventInfo)
        {
            eventInfo.AddEventHandler(target, new MenuItemsEditor.ViewModel.CultureChangeHandle(this.Invoke));
        }
        
        public override void RemoveEventHandler(object target, System.Reflection.EventInfo eventInfo)
        {
            eventInfo.RemoveEventHandler(target, new MenuItemsEditor.ViewModel.CultureChangeHandle(this.Invoke));
        }
    }
    
    public sealed class CNSPr_IMenuItemTSViewModel_PreparationItemChanged : OOAdvantech.Remoting.EventConsumerHandler
    {
        
        public void Invoke(FlavourBusinessManager.RoomService.ItemPreparation preparationItem)
        {
            object[] args = new object[1];
            System.Type[] argsTypes = new System.Type[1];
            args[0] = preparationItem;
            argsTypes[0] = typeof(FlavourBusinessManager.RoomService.ItemPreparation);
            object retValue = this.Invoke(typeof(MenuItemsEditor.ViewModel.PreparationItemChangedHandle), "Invoke", args, argsTypes);
        }
        
        public override void AddEventHandler(object target, System.Reflection.EventInfo eventInfo)
        {
            eventInfo.AddEventHandler(target, new MenuItemsEditor.ViewModel.PreparationItemChangedHandle(this.Invoke));
        }
        
        public override void RemoveEventHandler(object target, System.Reflection.EventInfo eventInfo)
        {
            eventInfo.RemoveEventHandler(target, new MenuItemsEditor.ViewModel.PreparationItemChangedHandle(this.Invoke));
        }
    }
}
